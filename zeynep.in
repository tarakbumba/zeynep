#! /bin/bash
#############################################################################
#    This file is part of Zeynep.                                           #
#                                                                           #
#    Copyright (C) 2015  Atilla ÖNTAŞ <tarakbumba at gmail dot com>         #
#                                                                           #
#    Zeynep is free software: you can redistribute it and/or modify         #
#    it under the terms of the GNU General Public License as published by   #
#    the Free Software Foundation, either version 2 of the License, or      #
#    (at your option) any later version.                                    #
#                                                                           #
#    Zeynep is distributed in the hope that it will be useful,              #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
#    GNU General Public License for more details.                           #
#                                                                           #
#    You should have received a copy of the GNU General Public License      #
#    along with Zeynep.  If not, see <http://www.gnu.org/licenses/>.        #
#                                                                           #
#############################################################################

# gettext initialization
export TEXTDOMAIN=zeynep
export TEXTDOMAINDIR='@prefix@/share/locale'
# Name and version info
app_name="Zeynep"
app_version="@PACKAGE_VERSION@"

# Coloring our messages (Thanks to Arch Linux & pacman dev team)
# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
# prefer terminal safe colored and bold text when tput is supported
if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"

else
		ALL_OFF="\e[0m"
		BOLD="\e[1m"
		BLUE="${BOLD}\e[34m"
		GREEN="${BOLD}\e[32m"
		RED="${BOLD}\e[31m"
		YELLOW="${BOLD}\e[33m"
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

# Get the top level of this script (will be used in exit_function)
export TOP_PID=$$

####################################################################################################################################################
# Log file creation.
# I have tried infamous (exec > tee) stuff. Unfortunately i couldn't manage traps to work. This is the only working way that i' ve found:
####################################################################################################################################################
# Make sure that we have only one log file:
rm -f ${TMPDIR}/zeynep*.log 2>&1
log_file="$(mktemp -t --suffix=".log" zeynep.XXXXXXXXXX )"
#mkfifo ${log_file}.pipe
#sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK(]//g" | sed 's/\x1b(B//g' | tee < ${log_file}.pipe ${log_file} & 
#exec &> ${log_file}.pipe
exec &> >(tee -a "$log_file"; sed -i -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK(]//g" "$log_file"; sed -i 's/\x1b(B//g' "$log_file" )

####################################################################################################################################################
plain () {
# Function to display localized plain messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
msg () {
# Function to display localized and colorized information messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${GREEN}==> $(gettext "INFO :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
error2 () {
# Function to display localized and colorized information messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${RED}==> $(gettext "NOT CRITICAL ERROR :: ")${ALL_OFF}${BOLD}${YELLOW} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
error3 () {
# Function to display localized and colorized information messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${BLUE}==> $(gettext "REQUIRED PROGRAM CAN NOT BE FOUND :: ")${ALL_OFF}${BOLD}${YELLOW} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
warning () {
# Function to display localized and colorized warning messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
error () {
# Function to display localized and colorized error messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
config_file () {
# This function is created to check config files before proceeding:
# Check configuration file. If doesn't exist warn user:
# First control user defined, special configs for Releases (cauldron.conf, 4.conf, etc.) in user config dir:
####################################################################################################################################################

if [[ -f $XDG_CONFIG_HOME/zeynep/zeynep-$mga_version.conf ]];then
    source $XDG_CONFIG_HOME/zeynep/zeynep-$mga_version.conf
elif [ -f @sysconfdir@/zeynep.conf ];then    
    source @sysconfdir@/zeynep.conf
else
# none exists. Then warn user:
    msg "$(gettext "No configuration file detected.")"
fi

sign_rpms=${sign_rpms:=$use_rpm_sign}
local_build=${local_build:=$user_local_build}
genhdlist=${genhdlist:=$user_generate_hdlists}
cache_path=${cache_path:=$user_cache_directory}
temp_path=${temp_path:=$user_tempdir}
upload_path=${upload_path:=$user_upload_directory}
tarball_path=${tarball_path:=$user_tarball_directory}
noclean=${noclean:=$user_no_clean}
tidy_cache=${tidy_cache:=$user_tidy_rpm_cache}
tidy_upload_rpms_dir=${tidy_upload_rpms_dir:=$user_tidy_uploaded_rpms}
MGAARCH=${MGAARCH:=$user_arch}
use_cache=${use_cache:=$use_rpm_cache}
distrib_array+=("${user_distrib_url}")
media_array+=("${user_media_url}")
no_ignore_media_array+=("${user_no_ignore_media}")

# We should ensure that user supplied paths not end with "/". Otherwise, paths are wrong (https://github.com/tarakbumba/zeynep/issues/2)
#
# Tarball directory:
if [[ "${tarball_path: -1}" == "/" ]]; then tarball_dir="${tarball_path%?}"; else tarball_dir="${tarball_path}"; fi
# Cache directory:
if [[ "${cache_path: -1}" == "/" ]]; then cachedir="${cache_path%?}"; else cachedir="${cache_path}"; fi
# Tempdir:
if [[ "${temp_path: -1}" == "/" ]]; then tempdir="${temp_path%?}"; else tempdir="${temp_path}"; fi
# Upload dir:
if [[ "${upload_path: -1}" == "/" ]]; then uploaddir="${upload_path%?}"; else uploaddir="${upload_path}"; fi

}
####################################################################################################################################################
usage () {
# Display brief usage.
####################################################################################################################################################
echo ""
plain "$(gettext "  Zeynep - version %s\n")" "${app_version}"
echo "***************************************************************"
plain "$(gettext "  A rpm build utility with lots of features in clean chroot environment for Mageia GNU/Linux Distribution\n")"
echo "***************************************************************"
plain "$(gettext "Usage: zeynep [-g][options] [arguments] [-s] [srpm]\n")"
plain "$(gettext " -m        - Mageia version which rpms build for. Default: Cauldron")"
plain "$(gettext " -g        - Generate a chroot tarball which is used for building rpm")"
plain "$(gettext " -s        - Exact path/name of the srpm file. E.g. /home/user/foo-1.0-1.mga4.src.rpm")"
plain "$(gettext " -D        - Temporary directory for chroot environment. Can be used with '-g' option. Default: %s")" "${TMPDIR}"
plain "$(gettext " -d        - URL to retrive a set of media from a distribution.Uses 'urpmi.addmedia --distrib'. Default: MIRRORLIST")"
plain "$(gettext " -z        - Force zeynep to not use given distrib media with -d switch/or from config file and default to MIRRORLIST")"
plain "$(gettext " -c        - RPM cache directory which will be used for save time/bandwith. Default: Disabled")"
plain "$(gettext " -M        - URL to retrive packages from. E.g. 'www.someurl.org/pub/mageia/4/media/i586'. Default: Disabled")"
plain "$(gettext " -p        - Packages names to be installed in chroot. This option must be used with '-g' option
                 and each package must be seperated by a space in quotes. E.g. 'locales-tr wget' Default: Disabled")"
plain "$(gettext " -n        - Do not ignore specified medias in quote marks. E.g "%s". Default: Disabled")" "Nonfree Tainted Backports"
plain "$(gettext " -U        - Additional urpmi options to be used either in tarball creation or package building.")"
plain "$(gettext " -u        - Upload directory for created rpm packages. Default: Use path which srpm resides")"
plain "$(gettext " -a        - Architecture of Mageia version. This could be i586 on a 32bit machine or i586,
                 x86-64 or both of them for a 64bit machine. Default: Current machine arch")"
plain "$(gettext " -t        - Path of where chroot tarballs are/should reside. This option is mandatory.")"
plain "$(gettext " -C        - Use 'rpm-tidy' utility to clean older rpms in cache directory. Default: Disabled")"
plain "$(gettext " -T        - Use 'rpm-tidy' utility to clean older rpms in rpm upload directory. Default: Disabled")"
plain "$(gettext " -N        - Do not clean chroot environment upon exit. Default: Disabled")"
plain "$(gettext " -l        - Upload compiled rpms into srpm's directory. Default: Disabled unless you did not use '-u' option")"
plain "$(gettext " -S        - Sign rpm packages via rpm-sign utility. Default: Disabled")"
plain "$(gettext " -G        - Generate hdlists for compiled rpms upon exit. Default: Disabled")"
plain "$(gettext " -v        - Be verbose. Default: Disabled")"
plain "$(gettext " -V        - Be very verbose. Default: Disabled")"
plain "$(gettext " -h        - Display this help")"
plain "$(gettext "\nZeynep have to use previously created chroot environment to build packages.\nTherefore it provides a chroot tarball creation function via its '-g' switch.\nZeynep also can read most of these options from a local (~/.config/zeynep/zeynep-[mageia version].conf)\nconfigure file or from global (/etc/zeynep.conf) file.\nConfiguration file supplied with zeynep is quite self-explainatory.\nPlease see that file.")"

}

####################################################################################################################################################
run_command () {
# Runs bash command and sends all output to /dev/null
# It may be bad but i prefer hide them.
####################################################################################################################################################
    local command=$1; shift
    echo -e "\n$(gettext "RUN COMMAND (DEBUG) ==> ") "${command}":\n" >> ${log_file} 2>&1
	${command} >> ${log_file} 2>&1
}

####################################################################################################################################################
su_in_chroot () {
#Runs given commands in chroot as root
####################################################################################################################################################
    local command=$1; shift
    echo -e "\n$(gettext "RUN COMMAND (DEBUG) ==> ") "${command}":\n" >> ${log_file} 2>&1
	sudo /sbin/chroot ${chrootdir} su -c "${command}" >> ${log_file} 2>&1
}

####################################################################################################################################################
run_in_chroot () {
#Runs given commands in chroot as user
####################################################################################################################################################
    local command=$1; shift
    echo -e "\n$(gettext "RUN COMMAND (DEBUG) ==> ") "${command}":\n" >> ${log_file} 2>&1
	sudo /sbin/chroot ${chrootdir} su ${USER} -c "${command}" >> ${log_file} 2>&1
}

####################################################################################################################################################
countdown_dots () {
# Eye-candy for exit script. Show dots while exiting...
####################################################################################################################################################
for i in `seq 1 5`; do
    sleep 1
    echo -n "."
done
echo -e " \n"

}

####################################################################################################################################################
tidy_rpms () {
# Global function to tidy downloaded rpms either in cache directory or rpm upload directory for future use
####################################################################################################################################################
( run_command "which rpm-tidy" && tidy_cache="1" ) || (error3 "$(gettext "rpm-tidy can not be found and option is disabled.")" && tidy_cache="")

if [ -n "${tidy_cache}" ] && [ -e ${cachedir} ]; then
# First we need to change ownership of rpms to the user:
#    if run_command "sudo chown ${USER}:${USER} ${cachedir}/*.rpm"; then rpm_tidy="rpm-tidy"; else rpm_tidy="sudo rpm-tidy"; fi
    if  (( ls ${cachedir}/*.rpm | grep "i586" 2>&1 ) || ( ls ${cachedir}/*.rpm | grep "noarch" 2>&1 )) && (  ls ${cachedir}/*.rpm | grep "x86_64" 2>&1 ); then
        error2 "$(gettext "You have both i586/noarch and x86_64 rpms in %s directory. Using rpm-tidy is dangerous because it doesn't calculate arch of package. Therefore your i586/noarch packages may deleted. To prevent loss of rpms disabling rpm-tidy...")" "${cachedir}"
    else
        run_command "sudo rpm-tidy -f --dir="${cachedir}"" || warning "$(gettext "Zeynep failed to delete older rpms in %s using rpm-tidy utility. This is not critical. However you will have older versions/releases of same packages in the same directory. Please check %s for possible errors. Exiting...")" "${cachedir}" "${log_file}"
    fi
fi

( run_command "which rpm-tidy" && tidy_upload_rpms_dir="1" ) || (error3 "$(gettext "rpm-tidy can not be found and option is disabled.")" && tidy_upload_rpms_dir="")

if [[ -z ${generate_tarball} && -n "${tidy_upload_rpms_dir}" ]] && [ -e ${uploaddir} ]; then
    if  (( ls ${uploaddir}/*.rpm | grep "i586" 2>&1 ) || ( ls ${uploaddir}/*.rpm | grep "noarch" 2>&1 )) && (  ls ${uploaddir}/*.rpm | grep "x86_64" 2>&1 ); then
        error2 "$(gettext "You have both i586/noarch and x86_64 rpms in %s directory. Using rpm-tidy is dangerous because it doesn't calculate arch of package. Therefore your i586/noarch packages may deleted. To prevent loss of rpms disabling rpm-tidy...")" "${uploaddir}"
    else
        run_command "sudo rpm-tidy  -f --dir="${uploaddir}"" || warning "$(gettext "Zeynep failed to delete older rpms in %s using rpm-tidy utility. This is not critical. However you will have older versions/releases of same packages in the same directory. Please check %s for possible errors. Exiting...")" "${uploaddir}" "${log_file}"
    fi
fi

}

####################################################################################################################################################
unclean_temp () {
# Helper function for unmount_necessary_dirs function.
# We should check that if user wanted to delete chrootdir or not.
####################################################################################################################################################

if [[ -z ${noclean} ]]; then
    if mount | grep ${chrootdir}; then
        msg "$(gettext "%s won't be deleted. Please remove it manually.")" "${tempdir}"
    else
        msg "$(gettext "Deleting %s")" "${tempdir}"
        ( run_command "sudo rm -fr ${tempdir}" && msg "$(gettext "... DONE!")" ) || error "$(gettext "An error occured during deleting %s. Please delete it manually.")" "${tempdir}"
    fi
else
    msg "$(gettext "%s won't be deleted. Please remove it manually.")" "${chrootdir}"
fi

# We must unset some variable for future uses. Else it would be invoked twice...
unset tempdir
unset tarball
unset cachedir
unset urpmi_options_array
}

####################################################################################################################################################
unmount_necessary_dirs () {
# Check necessary mountpoints in chroot environment and if mounted, unmount them.
####################################################################################################################################################

msg "$(gettext "Unmounting system mountpoints from chroot environment before exiting")"

if [[ -d ${chrootdir} ]]; then
    mounted_points="proc dev dev/pts sys var/cache/urpmi/rpms"
        
    for mounted_dirs in ${mounted_points}; do
        if mount | grep ${chrootdir}/${mounted_dirs}; then
           ( sudo umount -R ${chrootdir}/${mounted_dirs} && msg "$(gettext "%s is succesfully unmounted!")" "${chrootdir}/${mounted_dirs}" ) || error "$(gettext "Zeynep can not unmount %s. Please do it manually. See %s for possible errors")" "${chrootdir}/${mounted_dirs}" "${log_file}"
        fi
    done
    unclean_temp
fi

}

####################################################################################################################################################
exit_function () {
# Special function for exits which tries to ensure unmounts.
####################################################################################################################################################

unmount_necessary_dirs
kill -s TERM ${TOP_PID} && exit 1

}

####################################################################################################################################################
create_tempdir () {
# Warn user for its dangers and if not found then ask user if he/she wants to create temp directory for chroot.
####################################################################################################################################################
warning "$(gettext "Creating a chroot environment in a directory other than %s is dangerous.\nThis process needs to run some commands as root, therefore your path for chroot environment may not be readable or writeable for your user account. You' ve been warned")" "${TMPDIR}"

if [[ ! -d ${tempdir} ]]; then
    read -r -p "$(plain "$(gettext "%s can not be found. Would you like to 'zeynep' create it?\n If you don't want to, then 'zeynep' will use %s directory: [y/N]")" "${tempdir}" "${TMP}" )" tempdir_response
    case $tempdir_response in
        [yY][eE][sS]|[yY] ) 
                        run_command "mkdir -p ${tempdir}" ||  ( error "$(gettext "An error occured during chroot directory creation. Please check %s for possible errors.")" "${log_file}" && exit_function )
                        ;;
        *)
                        
                        tempdir="$(mktemp -dt zeynep-chroot-XXXX)"
                        ;;
    esac

fi

chrootdir="${tempdir}/chroot"

}

####################################################################################################################################################
set_chroot_dirs () {
# This function setups chroot into TEMPDIR using chroot-tarball.tar.xz
# Check if there is a user defined directory to create chrootdir, else use /tmp
####################################################################################################################################################

if [[ -n ${tempdir} ]]; then
    create_tempdir
else
    tempdir="$(mktemp -dt zeynep-chroot-XXXXXX)"
    chrootdir="${tempdir}/chroot"
fi

# Set tarball directory as global variable for other functions
if [[ -n ${tarball} ]]; then
    tarball="${tarball}"
else
    tarball="${tarball_dir}/chroot-mageia-${mga_version}-${arch}"
fi

}

####################################################################################################################################################
test_tarball_dir ()  {
# Test if chroot tarball directory is given; if not show error and exit
####################################################################################################################################################

# If user did not specified tarball_dir which is mandatory then display error message and exit.
if [[ -z ${tarball_dir} ]]; then
    error "$(gettext "You tried to create a chroot tarball but did not provide a path where tarball(s) will created in. Please check %s for possible errors. Exiting...")" "${log_file}"
    exit_function
else
# If generate tarball option is used and tarball_dir can not found create tarball dir (For chroot tarball generating)
	if [[ -n ${generate_tarball} ]] && [[ ! -d ${tarball_dir} ]]; then
		msg "$(gettext "%s can not be found. Zeynep will create it!")" "${tarball_dir}"
		run_command "mkdir -p ${tarball_dir}" ||  ( error "$(gettext "An error occured during chroot directory creation. Please check %s for possible errors.")" "${log_file}" && exit_function )
	fi
	
# If generate_tarball option is not used then we are building rpm packages. Test if tarball_dir is there; if not display error message and exit
	if [[ -z ${generate_tarball} ]] && [[ ! -d ${tarball_dir} ]]; then
	    error "$(gettext "%s can not be found or not a valid path! Please supply a valid path which includes chroot tarballs. Exiting...")" "${tarball_dir}"
	    exit_function
	fi	    
fi

}

####################################################################################################################################################
cache_option () {
# Checks if cache option is used and if used, mount cache dir and also add --noclean option for urpmi
####################################################################################################################################################

if [[ -n ${use_cache} && -d ${cachedir} ]];then
    if run_command "sudo mkdir -p ${chrootdir}/var/cache/urpmi/rpms";then
        if run_command "sudo mount -R ${cachedir} ${chrootdir}/var/cache/urpmi/rpms"; then
        # We need to return noclean urpmi option from this function to the script
        # http://bash.cyberciti.biz/guide/Returning_from_a_function
            return 0
        else
            error2 "$(gettext "Failed to mount %s. Zeynep will continue without cache enabled.")" "${cachedir}" && return 1
        fi
    else
        error2 "$(gettext "Failed to create mandatory %s directory for rpm cache usage. Zeynep will continue without cache enabled.")" "${chrootdir}/var/cache/urpmi/rpms" && return 1
    fi
else
    if [[ ! -d ${cachedir} ]]; then error2 "$(gettext "%s cache directory can not be found. Zeynep will continue without cache enabled.")" "${cachedir}" && return 1; fi
fi

}

####################################################################################################################################################
search_array () {
# Function for increment medias.(Used in urpmi_media function)
####################################################################################################################################################
    index=0
    while [ "$index" -lt "${#media_array[@]}" ]; do
        if [ "${media_array[$index]}" = "$1" ]; then
            echo $index
            return
        fi
        let "index++"
    done
}

####################################################################################################################################################
default_distrib_url () {
# Helper function for urpmi functions.
# This is needed to ensure we use a valid remote "distrib" medium. Using MIRRORLIST.
####################################################################################################################################################
if [[ -z ${default_distrib} ]]; then
    error2 "$(gettext "Zeynep needs a repo url to add as a urpmi medium. But none found. Will use 'MIRRORLIST' by default.")"
else
    msg "$(gettext "User forced zeynep to use default distrib urpmi source: MIRRORLIST")"
fi

run_command "sudo urpmi.addmedia --urpmi-root ${chrootdir} --auto --distrib --mirrorlist \$MIRRORLIST" || ( error "$(gettext "Zeynep can not add default MIRRORLIST distrib source. Zeynep can not continue without a distrib urpmi medium. Please check %s for possible errors. Exiting...")" "${log_file}" && exit_function )

}

####################################################################################################################################################
care_medias () {
# We should also think of Nonfree and Tainted medias; give an option to the user for enabling them:
####################################################################################################################################################

if [[ -n "${no_ignore_media_array[*]}" ]]; then
    local IFS=""
    for non_ignored in ${no_ignore_media_array[*]}; do
        msg "$(gettext "Enabling %s media as urpmi source in chroot environment")" "${non_ignored}"
        if run_command "sudo urpmi.update --urpmi-root ${chrootdir} --no-ignore ${non_ignored} && sudo urpmi.update --urpmi-root ${chrootdir} -a"; then
            plain "$(gettext "... DONE!")"
        else 
            read -r -p "$(error2 "$(gettext "Zeynep can not enable %s media. Will continue without this media enabled. Do you want to proceed? [y/N]")" "${non_ignored}" )" media_response
            case $media_response in
                [yY][eE][sS]|[yY] ) 
                        echo
                        ;;
                *)
                        
                        exit_function
                        ;;
            esac
        fi
    done
fi

}

####################################################################################################################################################
urpmi_addmedia () {
# Add urpmi medias to get package lists and installation medium
####################################################################################################################################################

if [[ -n "${distrib_array[*]}" && -z ${default_distrib} ]]; then
    for distribs in ${distrib_array[*]}; do
        # Ensure that distrib path not ends with "/":
        if [[ "${distribs: -1}" == "/" ]]; then distrib_path="${distribs%?}"; else distrib_path="${distribs}"; fi
        # Add distrib medias:
        run_command "sudo urpmi.addmedia --urpmi-root ${chrootdir} --distrib ${distrib_path}/${mga_version}/${arch}" || ( error "$(gettext "Zeynep can not add %s distrib source. Therefore will try the default distrib media source")" "${distrib_path}" && default_distrib_url )
    done
else 
    default_distrib_url
fi

# And this is for urpmi medias:
if [[ -n "${media_array[*]}" ]]; then
    for media_ in ${media_array[@]}; do
        index=$(search_array $media_)
        # Ensure that distrib path not ends with "/":
        if [[ "${media_: -1}" == "/" ]]; then media_path="${media_%?}"; else media_path="${media_}"; fi
        # Message for user that we're about to add media:
        plain "$(gettext "Adding %s as %s urpmi media")" "${media_path}" "media${index}"
        # Add media to urpmi sources:
        if run_command "sudo urpmi.addmedia --urpmi-root ${chrootdir} media${index} ${media_path}"; then
            plain "$(gettext "... DONE!")"
        else 
            read -r -p "$(error "$(gettext "Zeynep can not add %s as %s urpmi media. Will continue without this media source. Do you want to proceed? [y/N]")" "${media_path}" "media${index}" )" media_add_response
            case $media_add_response in
                [yY][eE][sS]|[yY] ) 
                        echo
                        ;;
                *)
                        
                        exit_function
                        ;;
            esac
        fi       
    done
fi

care_medias

}

####################################################################################################################################################
####################################################################################################################################################



#****************************************        END OF COMMON FUNCTIONS AND VARIABLES          ****************************************************


####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################



#****************************************        START OF CHROOT TARBALL SCRIPT          ***********************************************************


####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################
control_rpmmacros () {
# Check if user wants to include rpmmacros file.
# Also, user can use his $HOME/.rpmmacros
####################################################################################################################################################
if [[ -n $use_rpm_macros ]]; then
    if [[ -f $HOME/.rpmmacros ]]; then
        if [[ -d ${chrootdir}/etc/skel ]]; then
            run_command "sudo cp -f ${HOME}/.rpmmacros ${chrootdir}/etc/skel/" || error2 "$(gettext "Specified rpmmacros file can not be copied")"
        else
            error2 "$(gettext "%s directory can not be found in %s chroot")" "/etc/skel" "${chrootdir}"
        fi
    else
        warning "$(gettext "Specified rpmmacros file can not be found. Will continue without rpmmacros installation")"
    fi
fi
}

####################################################################################################################################################
chroot_urpmi_install () {
# Main package installation function in chroot
# Check if user wants to use cache option. If cache is not used run standalone_urpmi_install_in_chroot_function:
####################################################################################################################################################

# Check that cache option is used
if cache_option; then urpmi_options+=("--noclean"); fi

# Add medias:
urpmi_addmedia

# Main urpmi install
msg "$(gettext "Starting to install base packages needed to create a build chroot environment: ")"
locales_packages="$(rpm -qa --queryformat "%{NAME}\n" | grep locales)"
chroot_rpms+=("basesystem-minimal ${locales_packages} rpm-build rpm-mageia-setup-build sudo urpmi rpm-sign curl")
local packages="${chroot_rpms[*]}"

# Default urpmi options. Should be stay as is.
urpmi_options+=("--auto --debug --excludedocs --no-verify-rpm --nolock --ignoresize")
urpmi_options_array="${urpmi_options[*]}"

# Install packages
( run_command "sudo urpmi --urpmi-root ${chrootdir} ${urpmi_options_array} ${packages}" && msg "$(gettext "Base packages installation was succesful. Starting to compressing operation")" ) || ( error "$(gettext "Urpmi failed to install base packages in chroot environment. See %s for detailed information")" "${log_file}" && exit_function )

# We should remove leftover medium sources before archiving chroot env.
msg "$(gettext "Removing configured urpmi sources before compressing chroot directory...")"
( run_command "sudo urpmi.removemedia --urpmi-root ${chrootdir} -a" && msg "$(gettext "...DONE!")" ) || error2 "$(gettext "Removing urpmi sources failed.")"

}

####################################################################################################################################################
create_tarball () {
# Creates xz compressed tarball from chroot directory.
# Created tarballs will be used for package building
####################################################################################################################################################

# First unmount cachedir before archiving or expect that a very big tarball :)
if mount | grep ${chrootdir}/var/cache/urpmi/rpms; then
    msg "$(gettext "Unmounting %s before starting to compress chroot environment...")" "${chrootdir}/var/cache/urpmi/rpms"
    ( run_command "sudo umount ${chrootdir}/var/cache/urpmi/rpms" && msg "$(gettext "... DONE! %s has been unmounted")" "${chrootdir}/var/cache/urpmi/rpms" ) || ( error "$(gettext "An error occured during unmounting %s. Please unmount manually.")" "${chrootdir}/var/cache/urpmi/rpms" && exit_function )
fi

# Push into tempdir and compress chroot directory now.
run_command "pushd ${tempdir}"
plain "$(gettext "Starting to create xz compressed tarball:")"
( run_command "sudo tar cJf $tarball.tar.xz --exclude='*.rpm' chroot" && msg "$(gettext "Zeynep succesfully completed the chroot tarball creation operation. Now you can use it for package building")" ) || ( error "$(gettext "Unable to compress %s as %s . Please check %s for possible errors. Exiting...")" "${chrootdir}" "${tarball}.tar.xz" "${log_file}" && run_command "popd" && exit_function )
run_command "popd"

}

####################################################################################################################################################
create_installed_rpms_list () {
# Create a sorted list of installed rpm packages in chroot.
####################################################################################################################################################
rpm_query_tags="%{NAME}-%{VERSION}-%{RELEASE} ==> [%{SOURCERPM}\n]"
rpms_list="$tarball-rpms.lst"
rpm -r ${chrootdir} -qa --queryformat "${rpm_query_tags}" | sort > ${rpms_list} || error "$(gettext "Can not write the list of installed rpms to %s. Will continue without creating it")" "$rpms_list"

}

####################################################################################################################################################
new_name_tarball () {
# Helper function for overwrite_tarball function
# Ask user for new tarball name.
####################################################################################################################################################

read -r -p "$(plain "$(gettext "Please enter a name for chroot-tarball without any extension: ")")" new_tarball_name
if [[ -n ${new_tarball_name} ]]; then
    msg "$(gettext "Your chroot-tarball name is now: %s")" "${new_tarball_name}.tar.xz"
    export tarball="$tarball_dir/$new_tarball_name"
else
    error "$(gettext "You did not give a name for chroot-tarball! Zeynep could not create a blank named tarball. Exiting... ")" && exit_function
fi
}

####################################################################################################################################################
overwrite_tarball () {
# Ask user if he wants to overwrite to previous tarball.
# If user does not want to overwrite exit with information message
####################################################################################################################################################

read -r -p "$(plain "$(gettext "Do you want to overwrite old tarball with the new one? [Y/n]")")" response
case $response in
    [yY][eE][sS]|[yY] ) 
                        create_tarball
                        ;;
    *)
                        new_name_tarball || ( error "$(gettext "%s can not be created! Exiting...")" "$tarball" && exit_function)
                        create_tarball
                        ;;
esac

}

####################################################################################################################################################
test_tarballs () {
# Test tarballs existance. If found create a backup directory and move them there before overwriting.
####################################################################################################################################################

if [[ -f "$tarball.tar.xz" ]]; then
    msg "$(gettext "Previously created %s tarball found. Zeynep will backup it.\nYou can find it in %s directory")" "$tarball.tar.xz" "${tarball_dir}/zeynep_backups"
    if [[ ! -d "${tarball_dir}/zeynep_backups" ]]; then
        run_command "mkdir -p ${tarball_dir}/zeynep_backups" || ( error "$(gettext "%s can not be created!")" "$tarball_dir/zeynep_backups" && overwrite_tarball )
    fi
    if mv -f $tarball.tar.xz ${tarball_dir}/zeynep_backups/$(date '+%Y%m%d%H%M')-chroot-mageia-${mga_version}-${arch}.tar.xz; then
        msg "$(gettext "Backup completed succesfully. %s is backed up as %s in %s directory")" "chroot-mageia-${mga_version}-${arch}.tar.xz" "$(date '+%Y%m%d%H%M')-chroot-mageia-${mga_version}-${arch}.tar.xz" "${tarball_dir}/zeynep_backups"
        create_tarball
    else
        error "$(gettext "%s can not be moved to %s")" "$tarball.tar.xz" "${tarball_dir}/zeynep_backups" && overwrite_tarball 
    fi
else
    create_tarball
fi

}

####################################################################################################################################################
generate_chroot () {
# Main chroot environment and tarball creation function.
# Create chroot environment and install basesystem + other required packages
####################################################################################################################################################

# Trap user terminates
trap 'msg "$(gettext "User aborted the operation. You can investigate %s logs. Cleaning up and exiting... ")" "${log_file}"; exit_function' SIGINT SIGHUP

# First messages to the user:
msg "$(gettext "Zeynep will start to create chroot tarball for %s version of Mageia Linux distribution for %s architecture")" "${mga_version}" "${arch}"
msg "$(gettext "You may need to type your "sudo" password several times during this operation unless you configure your "sudoers" file in /etc not to do so.")"

# Check if there is a user defined directory to create chrootdir, else use /tmp
set_chroot_dirs

# Test if chroot directory is given; if not show error and exit
test_tarball_dir

# Create chroot directory
run_command "mkdir -p ${chrootdir}" || ( error "$(gettext "'mkdir' command can not create chroot directory at %s. See %s for possible errors. Exiting...")" "$TMPDIR" "${log_file}" && exit_function )

## Run sub functions now:
chroot_urpmi_install
control_rpmmacros
create_installed_rpms_list
test_tarballs
## We should clean our mess :)
tidy_rpms
unmount_necessary_dirs

}

####################################################################################################################################################
####################################################################################################################################################



#****************************************        END OF THE CHROOT TARBALL CREATION SCRIPT          ************************************************


####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################



#****************************************        START OF PACKAGE BUILD SCRIPT          ************************************************************


####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################

####################################################################################################################################################
package_or_chroot () {
# Determine if we have an srpm file; if there is an srpm then source config files and run rpm building function
# If not then source config files and create chroot tarball function
####################################################################################################################################################

if [[ -n ${given_srpm} ]]; then
    if [ ${given_srpm: -8} == ".src.rpm" ]; then
        srpm="${given_srpm}"
        # Get user config values from config files:
        config_file
        # Create rpms:
        build_in_chroot
    else
        error "$(gettext "Given %s file is not an srpm. Please supply a valid srpm and try again. Exiting...")" "${given_srpm}" && exit 1
    fi
else
    if [[ -n ${generate_tarball} ]]; then
        # Get user config values from config files:
        config_file
        # Create tarballs
        generate_chroot
    else
        ( error "$(gettext "You must supply a srpm file to build rpm packages using zeynep but none given.\nOr do you forget to use '-s' switch? Exiting...")" && exit 1 )
    fi
fi

}

####################################################################################################################################################
check_system_arch () {
# We should check if system is 64 bit capable.
# We should not try to build a 64 bit package/chroot on a 32 bit
# system, should we ? :-)
####################################################################################################################################################

if [[ -n ${MGAARCH} ]]; then
    if [[ $(arch) != "x86_64" ]] && [[ "${MGAARCH}" == "x86_64" || ${MGAARCH} == "both" ]]; then
        error2 "$(gettext "You have set build arch as 64bit on a 32 bit machine which is impossible! Zeynep will create packages/chroot for 32bit architecture...")"
        export arch="i586" && package_or_chroot
    elif [ $(arch) == "x86_64" ] && [ ${MGAARCH} == "x86_64" ] || [ ${MGAARCH} == "i586" ]; then
        export arch="${MGAARCH}" && package_or_chroot
    elif [ $(arch) != "x86_64" ] && [ ${MGAARCH} == "i586" ]; then
        export arch="i586" && package_or_chroot 
    elif [ ${MGAARCH} == "both" ]; then
        unset arch && export arch="i586" && package_or_chroot
        msg "$(gettext "\nZeynep will try to create package/tarball for x86_64 system now.\n")"
        unset arch && export arch="x86_64" && package_or_chroot
    fi
else
    warning "$(gettext "You have specified an invalid argument for system architecture. Zeynep will build packages/tarballs for your system's main architecture")"
    if [ $(arch) != "x86_64" ]; then export arch="i586" && package_or_chroot; else export arch="x86_64" && package_or_chroot; fi
fi

}

####################################################################################################################################################
extract_tarball () {
# Extract chroot tarball into chrootdir.
####################################################################################################################################################

if [[ -f ${tarball}.tar.xz ]]; then
    if [[ -d ${tempdir} ]]; then
        msg "$(gettext "Extracting %s to chroot directory. This may take a few minutes. Please wait...")"
        ( run_command "sudo tar Jxf ${tarball}.tar.xz -C ${tempdir}" && mount_necessary_dirs ) || ( error "$(gettext "Zeynep can not extract %s tarball to %s. Please check %s for possible errors. Exiting...")" "${tarball}.tar.xz" "${tempdir}" "${log_file}" && exit_function )
    else
        error "$(gettext "A temporary directory to extract %s is mandatory, but none found. Please check %s for possible errors. Exiting...")" "${tempdir}" "${log_file}"
        exit_function
    fi
else
    ( error "$(gettext "Previously prepared chroot tarball is mandatory, but no %s tarball found. Please create one via this script using '-g' switch. Please check %s for possible errors. Exiting now...")" "${tarball}.tar.xz" "${log_file}" && exit_function )
fi

}

####################################################################################################################################################
create_chroot_user () {
####################################################################################################################################################
# Create user account and user home directory; then chown all files to user in chroot
msg "$(gettext "Zeynep will try to setup '%s' user account. Please wait a second...")" "${USER}"
( su_in_chroot "useradd -u ${UID} ${USER}" && plain "$(gettext "... DONE!")" ) || ( error "$(gettext "Zeynep can not create %s user account in chroot environment. Please check %s for possible errors. Exiting...")" "${USER}" "${log_file}" &&  exit_function )
#msg "$(gettext "Zeynep will try to change ownership of all files as %s in user HOME directory. Please wait a second...")" "${USER}"
#( su_in_chroot "chown -R ${USER}:${USER} /home/${USER}" && plain "$(gettext "... DONE!")" ) || ( error "$(gettext "Zeynep can not create %s user account in chroot environment. Please check %s for possible errors.")" "${USER}" "${log_file}" && exit_function )

}

####################################################################################################################################################
mount_necessary_dirs () {
# Mount necessary mountpoint in chroot:
####################################################################################################################################################

# Message to user:
msg "$(gettext "Zeynep tries to mount necessary mount points %s to %s chroot directory.")" "(/dev,/dev/pts,/sys,/proc)" "${chrootdir}"

# Use special mount for proc
sudo mount -t proc proc ${chrootdir}/proc || ( error "$(gettext "Zeynep can not mount %s .This is critical. Zeynep can not continue...")" "${mount_points}" && exit_function )

# Mount and error in for loop:
for mount_points in $(echo "dev dev/pts sys"); do
    run_command "sudo mount --bind /${mount_points} ${chrootdir}/${mount_points}" || ( error "$(gettext "Zeynep can not mount %s to %s. This is critical.  Please check %s for possible errors. Zeynep can not continue...")" "/${mount_points}" "${chrootdir}/${mount_points}" "${log_file}" && exit_function )
done

# It is not harmful to add resolv.conf copying to here (needed for internet connection)
if [[ -f /etc/resolv.conf ]]; then
    run_command "sudo cp -f /etc/resolv.conf ${chrootdir}/etc/resolv.conf" || ( error "$(gettext "Zeynep can not copy /etc/resolv.conf in chroot environment. Please check %s for possible errors.Exiting...")" "${log_file}" &&  exit_function )
else
    error "$(gettext "Zeynep can not locate /etc/resolv.conf in chroot environment. Please check %s for possible errors.Exiting...")" "${log_file}"
    exit_function
fi

# Now we can create our user account and $HOME directory.
create_chroot_user

}

####################################################################################################################################################
copy_srpm () {
# Copy srpm into the chroot dir.
####################################################################################################################################################

run_command "cp -f ${srpm} ${chrootdir}/home/${USER}/" || ( error "$(gettext "Zeynep can not copy %s source rpm to %s. Can not continue. Please check %s for possible errors. Exiting...")" "${srpm}" "${chrootdir}/home/${USER}/" "${log_file}" && exit_function )

}

####################################################################################################################################################
update_rpms () {
# Rebuild rpm database and try to update the system in chroot
####################################################################################################################################################

# Check if user wants to use rpm cache:
if cache_option; then urpmi_options+=("--noclean"); fi

# Update rpms in chroot (There would be updated packages after chroot tarball creation)
msg "$(gettext "There may be updated packages after chroot tarball creation. Zeynep will try to update chroot system. Please wait a few seconds...")"
if su_in_chroot "urpmi --auto --auto-update"; then
    msg "$(gettext "... DONE!")"
else
    read -r -p "$(plain "$(gettext "Zeynep failed to update rpms in chroot. Would you like to continue [Y/n] ")")" continue_action
    case $continue_action in
    [yY][eE][sS]|[yY] ) 
                        msg "$(gettext "Zeynep will continue without updated system in chroot")"
                        ;;
    *)
                        msg "$(gettext "User choose to not contiune without an updated chroot system. Exiting...")"
                        exit_function
                        ;;
    esac
fi

# Rebuild rpm database in chroot environment
msg "$(gettext "Rebuilding RPM database. Please wait a few seconds...")"
( su_in_chroot "rpm --rebuilddb" && msg "$(gettext "... DONE!")" ) || error "$(gettext "Zeynep failed to rebuild rpm database. Will try without this. But expect errors.")"

}

####################################################################################################################################################
install_deps () {
#Installs build dependencies using "urpmi --buildrequires" command
####################################################################################################################################################
# try to update the system in chroot:
update_rpms

# Define urpmi options
urpmi_options+=("--buildrequires --auto --debug --excludedocs --no-verify-rpm --nolock --ignoresize")
urpmi_options_array="${urpmi_options[@]}"

# Install build deps:
run_command "sudo urpmi --urpmi-root ${chrootdir} ${urpmi_options_array} ${srpm}" || ( error "$(gettext "Zeynep can not install build dependencies for %s. Please check %s for possible errors. Exiting...")" "${srpm}" "${log_file}" && exit_function )

}

####################################################################################################################################################
build_rpm () {
#Builds rpm package using "rpmbuild" utility in chroot environment
# Note that postbuild_staff variable and postbuild_functions function should be set in user/global configuration file
####################################################################################################################################################
pure_srpm="$(basename $srpm)"
msg "$(gettext "Zeynep will try to create rpm packages using %s.")" "${srpm}"
( run_in_chroot "rpmbuild --rebuild  /home/${USER}/${pure_srpm}" && msg "$(gettext "... DONE!")" )   || ( error "$(gettext "Zeynep failed to create rpm package from %s srpm. Please check %s for possible errors. Exiting...")" "${srpm}" "${log_file}" && exit_function )


if [[ -n "${postbuild_stuff}" ]]; then
    postbuild_functions
fi

}

####################################################################################################################################################
upload_rpms () {
# Copies rpm files to upload directory
####################################################################################################################################################
local rpmbuild_rpms_root="$(sudo /sbin/chroot ${chrootdir} su ${USER} -c "rpm --eval %_rpmdir")"
local rpm_packages="$(find ${chrootdir}${rpmbuild_rpms_root} -name "*.rpm")"
for package in ${rpm_packages}; do
    if [ ${package: -8} == ".src.rpm" ]; then
        msg "$(gettext "Found %s srpm package. Not copying in %s upload directory and deleting in chroot environment")" "${package}" "${uploaddir}"
        run_command "rm -f ${package}"
    else
        if [ ${package: -4} == ".rpm" ]; then
            package_name="$(basename ${package})"
            ( run_command "cp -vf ${package} ${uploaddir}/" && msg "$(gettext "%s package is uploaded to %s directory")" "${package_name}" "${uploaddir}" ) || ( error "$(gettext "Zeynep failed to upload %s rpm package to %s. Please check %s for possible errors. Exiting...")" "${package_name}" "${uploaddir}" "${log_file}" && exit_function )
        fi
    fi
done

}

####################################################################################################################################################
local_rpm_build() {
# Local rpm build function.
# First detect srpm dirctory, then create relevant RPM directories for created rpms
# Finally move created rpms into newly created directories
#
# These below can be written in one liner but for now we leave them to be self explainory
####################################################################################################################################################

local srpm_base="$(realpath ${srpm}|rev|cut -d "/" -f2-20 | rev)"
uploaddir="${srpm_base}/RPMS/$arch"

if [[ ! -d "${uploaddir}" ]]; then
    run_command "mkdir -p "${uploaddir}""    
fi

}

####################################################################################################################################################
signing_rpms () {
#Function for rpm signing:
# Note that prebuild_staff variable and prebuild_functions function should be set in user/global configuration file
####################################################################################################################################################

# Logic is create a list of rpms in upload dir before building packages:
find "${uploaddir}" -name "*.rpm" >> "${uploaddir}"/build_before_list

# Build package(s):

if [[ -n "${prebuild_stuff}" ]]; then
   prebuild_functions
fi

install_deps
build_rpm
upload_rpms

# Create a new list which also contains new rpm(s)
find "${uploaddir}" -name "*.rpm" >> "${uploaddir}"/build_after_list

# Go to upload dir and compare two lists with sort and uniq to find recently build rpms
# then sign new rpms and delete the lists we've created before.
pushd ${uploaddir}
    local rpm_packages="$(cat build_before_list build_before_list build_after_list | sort | uniq -u)"
    rpm --addsign $(echo "${rpm_packages//\'}")
    rm -f *_list
popd

}

####################################################################################################################################################
package_building () {
# Main package building function with extra stuff
# Note that prebuild_staff variable and prebuild_functions function should be set in user/global configuration file
####################################################################################################################################################

if [[ -n ${local_build} ]];then
    local_rpm_build
else
    if [[ -z "${uploaddir}" ]] || [[ ! -d "${uploaddir}" ]]; then
	    error2 "$(gettext "You did not specified a valid path to upload built rpms. Zeynep will put built rpms into srpm root directory tree.")"
	    local_rpm_build
    fi
fi

if [[ -n ${sign_rpms} ]]; then 
    signing_rpms
else
    if [[ -n "${prebuild_stuff}" ]]; then
        prebuild_functions
    fi
    install_deps
    build_rpm
    upload_rpms
fi

# We should check if rpms are sorted out in cache/upload directory before generating hdlists
tidy_rpms

# This is generate hdlist block
if [ -n "${genhdlist}" ]; then
    msg "$(gettext "Creating hdlists in %s")" "${uploaddir}"
    run_command "genhdlist2 --clean --allow-empty-media --xml-info ${uploaddir}" || warning "$(gettext "Zeynep failed to create (synthesis) hdlist file in %s. Please check %s for possible errors. Exiting...")" "${uploaddir}" "${log_file}"
fi

}

####################################################################################################################################################
build_in_chroot () {
# Main function for creating build chroot environment and package building
####################################################################################################################################################
# Trap user aborts
trap 'msg "$(gettext "User aborted the operation. You can investigate %s logs. Cleaning up and exiting... ")" "${log_file}"; exit_function' SIGINT SIGHUP
set_chroot_dirs
msg "$(gettext "You may need to type your "sudo" password several times during this operation unless you configure your "sudoers" file in /etc not to do so.")"
extract_tarball
copy_srpm
urpmi_addmedia
package_building
unmount_necessary_dirs
}


####################################################################################################################################################
### Start getopts code ###

#Parse command line flags
#If an option should be followed by an argument, it should be followed by a ":".
#Notice there is no ":" after "h". The leading ":" suppresses error messages from
#getopts. This is required to get my unrecognized option code to work.
####################################################################################################################################################
#m: mageia-version @argument
#g: generate chroot tarball @argument
#D: use given directory as tempdir instead of $TMP @argument
#d: distrib url @argument
#c: use cache=cachedir @argument
#M: media_url @argument
#n: no ignore media=media names (Nonfree, Tainted, Backports) @argument
#u: upload directory @argument
#U: user defined urpmi options
#t: chroot tarball= is in this directory @argument
#a: architecture @argument
#C: tidy-cache
#T: tidy-rpms
#N: no clean chrootdir
#v: be verbose
#V: be very verbose
#l: use local directory instead of uploading rpms
#S: sign compiled rpms via rpm-sign
#G: generate hdlists via genhdlist2
#h: help

passed_options=0
while getopts ":gCTNvVlSGhzm:D:d:c:M:n:u:a:U:t:p:s:" OPTION ; do
    passed_options=1
	case ${OPTION} in
		m)
			mga_version="${OPTARG}"
			;;
		g)
			generate_tarball="1"
			;;
		D)
			temp_path="${OPTARG}"
			;;
		d)
			distrib_url="${OPTARG}"
			distrib_array+=("$distrib_url")
			;;

		c)  
			use_cache=1
			cache_path="${OPTARG}"
			;;
		M)
			media_url="${OPTARG}"
			media_array+=("$media_url")
			;;
		n)
			no_ignore_media="${OPTARG}"
			no_ignore_media_array+=("${no_ignore_media}")
			;;
		p)
			chroot_rpms+=("${OPTARG}")
			;;
		U)
			script_urpmi_options="1"
			urpmi_options+=("${OPTARG}")
			;;
		u) 
			upload_path="${OPTARG}"
			;;		
		a)
		    MGAARCH="${OPTARG}"
		    ;;
		t)
			tarball_path="${OPTARG}"
			;;		    
		s)
		    given_srpm="${OPTARG}"
		    ;;			
		C)
		    ( run_comand "which rpm-tidy" && tidy_cache="1" ) || (error3 "$(gettext "rpm-tidy can not be found and option is disabled.")" && tidy_cache="")
		    ;;		
		T)
		    ( run_comand "which rpm-tidy" && tidy_upload_rpms_dir="1" ) || (error3 "$(gettext "rpm-tidy can not be found and option is disabled.")" && tidy_upload_rpms_dir="")
		    ;;		
		N)
		    noclean="1"
		    ;;		
		v)
		    set -x
		    ;;		
		V)  
		    set -xv
		    ;;		    
		l)
		    local_build="1"
		    ;;		    
		S)
		    sign_rpms="1"
		    ;;		
		G)
		     ( $(which genhdlist2) && genhdlist="1" ) || (error3 "$(gettext "genhdlist2 can not be found and option is disabled.")" && genhdlist="")
		    ;;		
		z)
		    default_distrib="1"
		    ;;		    
		h)
		    usage && exit 0
		    ;;		    
		\? )
		    error "$(gettext "Unrecognized option: %s ")" "'-${OPTARG}'" >&2
		    exit 1
		    ;;
		:)
		    error "$(gettext "Missing option argument for %s")" "-${OPTARG}" >&2
		    exit 1
		    ;;
		*)
		    error "$(gettext "Unrecognized option: %s. Did you try to set option without '-' prefixed?")" "'${OPTARG}'" >&2
		    exit 1
		    ;;
	esac
done

shift $((OPTIND-1))

if ((!passed_options)); then
  error "$(gettext "Zeynep needs an option to run but none given. Displaying brief usage for available options:")"
  usage && exit 1
fi

####################################################################################################################################################
# Start with main functions and variables:
####################################################################################################################################################
# Determine if Mageia version is given by user. If not, default to Cauldron
if [[ -z ${mga_version} ]]; then
    msg "$(gettext "You did not specify a Mageia version to built tarball/rpms. Zeynep is defaulting to Cauldron")"
    mga_version="cauldron"
fi

# Look for urpmi bin. Not found then exit.
run_command "which /sbin/urpmi" || ( error3 "$(gettext "urpmi tool can not be found. Are you trying to use zeynep on a non Mageia system?")" && exit 1 )

####################################################################################################################################################
# Beginning with Mageia 5, urpmi's "--no-suggests" option is deprecated in favor of "--no-recommends".
# The problem is urpmi < Mageia 5 does not understand new option and still uses "--no-suggests".
# So, we should check that before package installing in chroot. (We will need this again when building packages)
####################################################################################################################################################

if [[ ${mga_version} != "cauldron" && ${mga_version} < 5 ]]; then urpmi_options+=("--no-suggests"); else urpmi_options+=("--no-recommends"); fi

# Preliminary checks
if [[ -n ${MGAARCH} ]]; then    
    check_system_arch
else
    warning "$(gettext "You have specified no argument for system architecture. Zeynep will build packages/tarballs for your system's main architecture")"
    if [ $(arch) != "x86_64" ]; then MGAARCH="i586" && check_system_arch; else MGAARCH="x86_64" && check_system_arch; fi
fi


