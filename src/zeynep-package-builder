#! /usr/bin/env bash
set -x
# gettext initialization
export TEXTDOMAIN=zeynep
export TEXTDOMAINDIR='@localedir@'
# Name and version info
app_name="Zeynep"
app_version="1.0.0"

################################################
# Testing variables
################################################
mga_version="4"
arch="x86_64"
urpmi_url="http://ftp.linux.org.tr/mageia/distrib"
distrib_url="$urpmi_url/$mga_version/$arch"
urpmi_options+=("--use-distrib $distrib_url")
cachedir="/home/atilla/cache/4/x86_64"
chroot_directory="/home/atilla/rpm/chroot-tarballs"
use_cache="1"
use_rpm_macros="1"

################################################


####################################################################################################################################################
# Coloring our messages (Thanks to Arch Linux & pacman dev team)
# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
# prefer terminal safe colored and bold text when tput is supported
if tput setaf 0 &>/dev/null; then
		ALL_OFF="$(tput sgr0)"
		BOLD="$(tput bold)"
		BLUE="${BOLD}$(tput setaf 4)"
		GREEN="${BOLD}$(tput setaf 2)"
		RED="${BOLD}$(tput setaf 1)"
		YELLOW="${BOLD}$(tput setaf 3)"
else
		ALL_OFF="\e[0m"
		BOLD="\e[1m"
		BLUE="${BOLD}\e[34m"
		GREEN="${BOLD}\e[32m"
		RED="${BOLD}\e[31m"
		YELLOW="${BOLD}\e[33m"
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

####################################################################################################################################################
# Log file creation.
# I have tried infamous (exec > tee) stuff. Unfortunately i couldn't manage traps to work. This is the only working way that i' ve found:
####################################################################################################################################################
log_file="$(mktemp -t --suffix=".log" zeynep-builder.XXXXXXXXXX )"
mkfifo ${log_file}.pipe
tee < ${log_file}.pipe $log_file &
exec &> ${log_file}.pipe

####################################################################################################################################################
plain () {
# Funtion to display localized plain messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
msg () {
# Funtion to display localized and colorized information messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${GREEN}==>$(gettext "INFO :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
error2 () {
# Function to display localized and colorized information messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${RED}==>$(gettext "NOT CRITICAL ERROR :: ")${ALL_OFF}${BOLD}${YELLOW} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
warning () {
# Funtion to display localized and colorized warning messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${YELLOW}==> $(gettext "WARNING :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
error () {
# Funtion to display localized and colorized error messages
####################################################################################################################################################
	local mesg=$1; shift
	printf "${RED}==> $(gettext "ERROR :: ")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

####################################################################################################################################################
run_command () {
# Runs bash command and sends all output to /dev/null
# It may be bad but i prefer hide them.
####################################################################################################################################################
    local command=$1; shift
    ${command} > /dev/null 2>&1
}

####################################################################################################################################################
tidy_rpms () {
# Global function to tidy downloaded rpms either in cache directory or rpm upload directory for future use
####################################################################################################################################################
tidy_dir=$1
if [[ -n "$tidy_rpms" ]]; then rpm-tidy -f --dir="$tidy_dir"; fi

}

####################################################################################################################################################
trap_function () {
# Cleans up build directories
####################################################################################################################################################
run_command "sudo umount $chrootdir/{dev/pts,dev,proc,sys,var/cache/urpmi/rpms}"
}

#trap "control_c; exit" SIGINT SIGTERM SIGHUP


####################################################################################################################################################
tidy_log_file () {
# Helper function to clean up and tidy logfile:
# Currently not working, see this as a placeholder
####################################################################################################################################################
sed -i "s|^[[1m^[[32m||g" $log_file
}

####################################################################################################################################################

unmount_necessary_dirs () {
# Unmount necessary mountpoint in chroot:
sudo umount -R ${chrootdir}/{dev/pts,dev,proc,sys}
}

exit_function () {
msg "$(gettext "\nUnmounting system mountpoints from chroot environment before exiting")"
( unmount_necessary_dirs && exit 1 ) || ( error "$(gettext "Zeynep can not unmount %s, %s, %s or %s. Please do it manually!!!")" "${chrootdir}/dev" " ${chrootdir}/proc" "${chrootdir}/sys" "${chrootdir}/dev/pts" && exit 1 )

mount_necessary_dirs () {
# Mount necessary mountpoint in chroot:
sudo mount --bind /dev ${chrootdir}/dev
sudo mount -t proc proc ${chrootdir}/proc
sudo mount --bind /sys ${chrootdir}/sys
sudo mount --bind /dev/pts ${chrootdir}/dev/pts

# It is not harmful to add resolv.conf copying to here (needed for internet connection)
run_command "cp /etc/resolv.conf ${chrootdir}/etc/resolv.conf" || ( error "$(gettext "Zeynep can not copy /etc/resolv.conf in chroot environment. Exiting...")" && exit 1 )

}


run_in_chroot () {
#Runs given commands in chroot
    local command=$1; shift
    sudo /sbin/chroot ${chrootdir} su -c "${command}"  2>&1
}

extract_tarball () {
# Extract chroot tarball into chrootdir.

run_command "tar Jxf ${tarball} -C ${chrootdir}" || ( error "$(gettext "Zeynep can not create %s user account in chroot environment. Exiting...")" "${USER}" && exit 1 )

}
create_chroot_user () {
# Create user account and user home directory; then chown all files to user in chroot
msg "$(gettext "Zeynep will try to setup %s user account and change ownership of all files in user HOME. Please wait a second...")" "${USER}"
( run_in_chroot "useradd ${USER}" && plain "$(gettext "DONE!")" ) || ( error "$(gettext "Zeynep can not create %s user account in chroot environment. Exiting...")" "${USER}" && exit 1 )
( run_in_chroot "chown -R ${USER}:${USER} /home/${USER}" && plain "$(gettext "DONE!")" ) || ( error "$(gettext "Zeynep can not create %s user account in chroot environment. Exiting...")" "${USER}" && exit 1 )

}

setup_chroot () {
# This function setups chroot into TEMPDIR using chroot-tarball.tar.xz
# Check if there is a user defined directory to create chrootdir, else use /tmp

if [[ -n ${tempdir} ]]; then
    warning "$(gettext "Creating a chroot environment in a directory other than /tmp is dangerous.\nThis process needs to run some commands as root, therefore your path for chroot environment may not be readable or writeable for your user account. You' ve been warned")"
    chrootdir="$tempdir/chroot"
else
    tempdir="$(mktemp -dt zeynep-chroot-XXXX)"
    chrootdir="$tempdir/chroot"
fi

}
#mount_necessary_dirs
#create_chroot_user
#unmount_necessary_dirs







